@page "/post"

@using ProsjektOppgaveBlazor.Data.CommonModels
@using Newtonsoft.Json
@inject IJSRuntime JsRuntime

<h3>Create Post</h3>

<AuthorizeView>
    <Authorized>
                <div class="row">
                    <div class="col-md-3">
                            <div class="form-group">
                                <div>
                                    <label for="Name">New post for @(_username = context.User.Identity.Name):</label>
                                    <input class="form-control" type="text" @bind="_postModel.Title"/>
                                </div>
                                <div>
                                    <label for="Content">Content:</label>
                                    <textarea class="form-control" rows="10" @bind="_postModel.Content"></textarea>
                                </div>
                              <div class="mb-3">
                                  <label class="form-label">Blog</label>
                                  <select class="form-control"@bind="_postModel.BlogId">
                                      @foreach(var blog in _blogs)
                                      {
                                          <option value="@blog.BlogId">@blog.Name</option>
                                      }
                                  </select>
                                  <div class="alert alert-danger d-none" id="blog-name-error-label"></div>
                              </div>
                                <br/>
                                
                                
                                <button class="btn btn-primary" @onclick="Save">Save</button>
        
                            </div>
                    </div>
                </div>
    </Authorized>

</AuthorizeView>


@code {
    
    private PostModel _postModel = new PostModel();
    private HttpClient _httpClient = new HttpClient();
    private string _username = string.Empty;
    private BlogModel[] _blogs = new BlogModel[0];
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HttpResponseMessage responseMessage = await _httpClient.GetAsync("https://localhost:7022/blogs");
            if (responseMessage.IsSuccessStatusCode)
            {
                string _jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                _blogs = JsonConvert.DeserializeObject<BlogModel[]>(_jsonResponse);
                StateHasChanged();
            }
        }
    }
    
    private async Task<string> Save()
    {
        await JsRuntime.InvokeVoidAsync("console.log", "Blogs:", _blogs);
        
        string token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        token = token.Trim('"');
        _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        _httpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
        _httpClient.DefaultRequestHeaders.Host = "localhost:7115";
        var response = await _httpClient.PostAsJsonAsync("https://localhost:7022/api/Post/Create", new
        {
            OwnerName = _username,
            BlogId = _postModel.BlogId,
            Title = _postModel.Title,
            Content = _postModel.Content
        });
        
        return response.IsSuccessStatusCode ? "Success" : "Failed";
    }
}
