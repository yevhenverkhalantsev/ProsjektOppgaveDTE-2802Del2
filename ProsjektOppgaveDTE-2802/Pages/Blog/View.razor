@page "/blogs/view/{id:int}"
@using ProsjektOppgaveBlazor.Components.Post
@using ProsjektOppgaveBlazor.Data.CommonModels
@using Newtonsoft.Json
@using Microsoft.AspNetCore.SignalR.Client
@using ProsjektOppgaveBlazor.Pages.Post

<div class="container">
    <div class="card">
        <div class="card-header">
            <h5 class="card-title" style="color: black">@_blogModel.Title</h5>
            <CascadingValue Value="this">
                <CreatePostModal BlogId="Id"/>
            </CascadingValue>
            
        </div>
    </div>
@if (_blogModel.Posts is { Count: > 0 })
{
    @foreach (var post in _blogModel.Posts)
    {
        <CascadingValue Value="this">
            <ViewPost Post="post"/>
        </CascadingValue>
    }
}
        
<div class="modal fade" id="edit-comment-modal" tabindex="-1" >
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                Edit comment
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" id="edit-comment"/>
            </div>
            <div class="modal-footer">
                <button id="btn-save-comment" type="button" style="margin-bottom: 10px" class="btn btn-success" onclick="saveCommentData()">Save</button>
                <input class="d-none" id="close-edit-comment-button" data-dismiss="modal"/>
            </div>
        </div>
    </div>
</div>

    <EditPostModal @ref="_editPostModal"/>
    
</div>

@code {

    [Parameter]
    public int Id { get; set; }
    
    private HttpClient _httpClient = new HttpClient();
    private BlogViewModel _blogModel = new BlogViewModel();
    private EditPostModal _editPostModal;
    
    protected override async Task OnInitializedAsync()
    {
        
        HubConnection hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7022/api/post/create")
            .Build();

        await hubConnection.StartAsync();
        hubConnection.On<PostViewModel>("PostCreateNotify", async (post) =>
        {
            if (post.BlogId == Id)
            {
                _blogModel.Posts.Add(post);
            }
            await InvokeAsync(StateHasChanged);
        });
        
        
        HubConnection hubConnectionPostDelete = new HubConnectionBuilder()
            .WithUrl("https://localhost:7022/api/Post/Delete")
            .Build();
        
        await hubConnectionPostDelete.StartAsync();
        hubConnectionPostDelete.On<long>("PostDeleteNotify", async (postId) =>
        {
            PostViewModel post = _blogModel.Posts.FirstOrDefault(x=>x.PostId == postId);

            if (post != null)
            {
                _blogModel.Posts.Remove(post);
            }
            await InvokeAsync(StateHasChanged);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HttpResponseMessage responseMessage = await _httpClient.GetAsync($"https://localhost:7022/api/Blog/{Id}");
            if (responseMessage.IsSuccessStatusCode)
            {
                string jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                _blogModel = JsonConvert.DeserializeObject<BlogViewModel>(jsonResponse);
                StateHasChanged();
            }
        }
    }

    public void OpenEditPostModal(PostViewModel post)
    {
        _editPostModal.OpenModal(post);
    }
}