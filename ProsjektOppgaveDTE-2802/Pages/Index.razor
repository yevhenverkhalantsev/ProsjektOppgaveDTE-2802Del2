@page "/"
@using ProsjektOppgaveBlazor.Data.CommonModels
@using Newtonsoft.Json
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Headers
@inject IJSRuntime JsRuntime

<div class="input-group rounded">
    <form class="form-inline my-2 my-lg-0">
      <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
      <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
    </form>
</div>
<div class="container-fluid pt-4 px-4">
    <div class="bg-secondary text-center rounded p-4">
        <div class="d-flex align-items-center justify-content-between mb-4">
            <h6 class="mb-0">Blogs</h6>
        </div>
        <div class="table-responsive">
            <table class="table text-start align-middle table-bordered table-hover mb-0">
                <thead>
                <tr class="text-white">
                    <th scope="col">Author</th>
                    <th scope="col">Title</th>
                    <th scope="col">More info</th>
                    <th scope="col">Delete blog</th>
                </tr>
                </thead>
                <tbody>

                @foreach (var t in _blogs)
                {
                    <tr>
                        <td>@t.Owner.UserName</td>
                        <td>@t.Name</td>
                        <td><a class="btn btn-primary" href="/blogs/view/@t.BlogId">More info</a></td>
                        <td><input type="button" class="btn btn-danger" value="Delete" @onclick="()=> DeleteBlogHandler(t.BlogId)"/></td>
                    </tr>
                }

                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    [Parameter] public int Id { get; set; }
    
    private HttpClient _httpclient = new HttpClient();
    private BlogModel[] _blogs = new BlogModel[0];
    
    HttpClient _httpClient = new HttpClient();
        
    protected override async Task OnInitializedAsync()
    {
       HubConnection hubConnectionBlogDelete = new HubConnectionBuilder()
            .WithUrl("https://localhost:7022/api/blog/delete")
            .Build();

        await hubConnectionBlogDelete.StartAsync();
        hubConnectionBlogDelete.On<int>("DeleteBlogHandler", async (id) =>
        {
            BlogModel[] temp = new BlogModel[_blogs.Length - 1];
            for ( int i = 0, j = 0; i < _blogs.Length; i++)
            {
                if (_blogs[i].BlogId != id)
                {
                    temp[j] = _blogs[i];
                    j++;
                }
            }
            _blogs = temp;

            await InvokeAsync(StateHasChanged);
        });
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           HttpResponseMessage responseMessage = await _httpclient.GetAsync("https://localhost:7022/blogs");
              if (responseMessage.IsSuccessStatusCode)
              {
                  string _jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                  _blogs = JsonConvert.DeserializeObject<BlogModel[]>(_jsonResponse);
                  StateHasChanged();
              }
        }
    }
    
    private async Task DeleteBlogHandler(int blogId)
    {
        // string token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        // _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        HttpResponseMessage response = await _httpClient.DeleteAsync($"https://localhost:7022/api/Blog/Delete/{blogId}");
    }


}
