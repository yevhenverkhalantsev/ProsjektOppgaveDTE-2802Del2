@inherits PostModalBase

@using ProsjektOppgaveBlazor.Data.CommonModels
@using System.Net.Http.Headers
@using System.Security.Claims
@using Newtonsoft.Json
@using ProsjektOppgaveBlazor.Pages.Blog
@using ProsjektOppgaveBlazor.Components.Tag
@using ProsjektOppgaveBlazor.Services.JwtServices

@inject IJSRuntime JsRuntime
@inject IJwtService JwtService


<ModalDialog Title="Edit post" @ref="_modalDialog">
                <div class="modal-body bg-secondary rounded h-100 p-4">
    
                    <div class="mb-3">
                        <label class="form-label">Title</label>
                        <input type="text" class="form-control" id="post-title" @bind="_postModel.Title">
                    </div>
    
                    <div class="mb-3">
                        <label class="form-label">Content</label>
                        <input type="text" class="form-control" id="post-content" @bind="_postModel.Content">
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Tags</label>
                        <CascadingValue Value="this">
                            <NotSelectedTags Tags="_enableTags"/>
                            <SelectedTags Tags="_postModel.Tags"/>
                        </CascadingValue>
                        </div>
    
                </div>
                <div class="modal-footer">
                    <button id="btnCreate" type="button" style="margin-bottom: 10px" class="btn btn-success" 
                            @onclick="EditPostHandler">Save</button>
    
                    <div id="create-success-label" class="alert alert-success d-none">
                        Updated successfully!
                    </div>
                    <div id="create-error-label" class="alert alert-danger d-none">
                        Error on updated!
                    </div>
                </div>
</ModalDialog>

@code {
    [CascadingParameter] public View ParentComponent { get; set; }
    
    private PostViewModel _postModel = new PostViewModel();
    private ModalDialog _modalDialog = new ModalDialog();
    private HttpClient _httpClient = new HttpClient();
    private ElementReference _hideModalBtn = new ElementReference();
    private List<TagViewModel> _enableTags = new List<TagViewModel>();
    private string _userName = "";
    
    private async Task EditPostHandler(MouseEventArgs e)
    {
        if (e.Button == 0)
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await JsRuntime.InvokeAsync<string>("localStorage.getItem", "authToken"));
            HttpResponseMessage response = await _httpClient.PostAsJsonAsync("https://localhost:7022/api/post/update", new
            {
                PostId = _postModel.PostId,
                Title = _postModel.Title,
                Content = _postModel.Content,
                TagIds = _postModel.Tags.Select(x => x.Id).ToList()
            });
            if (response.IsSuccessStatusCode)
            {
                _modalDialog.Close();
                _postModel.Title = "";
                _postModel.Content = "";
            }
        }
    }
    
    public async Task OpenModal(PostViewModel postModel)
    {
        _modalDialog.Open();
        _postModel = postModel;
        
            HttpResponseMessage responseMessage = await _httpClient.GetAsync($"https://localhost:7022/api/tag/getall?userName={_userName}");
            if (responseMessage.IsSuccessStatusCode)
            {
                string jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                List<TagViewModel> availableTags = JsonConvert.DeserializeObject<List<TagViewModel>>(jsonResponse);
                _enableTags = availableTags.Where(x => _postModel.Tags.FirstOrDefault(y => y.Id != x.Id) != null).ToList();  //bug with enable Tags
            }
        StateHasChanged();
    }
    
    public override void SelectTag(TagViewModel tagViewModel)
    {
        _enableTags.Remove(tagViewModel);
        _postModel.Tags.Add(tagViewModel);
        StateHasChanged();
    }
    
    public override void UnselectTag(TagViewModel tagViewModel)
    {
        _postModel.Tags.Remove(tagViewModel);
        _enableTags.Add(tagViewModel);
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        string token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        token = token.Trim('\"');
        var claims = JwtService.Decode(token);
        _userName = claims.FirstOrDefault(x=> x.Type == ClaimTypes.Name).Value;
    }


}