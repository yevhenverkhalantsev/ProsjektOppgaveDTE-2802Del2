@using ProsjektOppgaveBlazor.Data.CommonModels
@using System.Net.Http.Headers
@inject IJSRuntime JsRuntime

<br/>
            <div id="post-container-">
                <div class="card">
                    <div class="card-header">
                        <div class="row">
                            <h5 class="col-md" style="color: black">
                                @Post.Title
                            </h5>
                        </div>

                    </div>
                    
                    <div class="card-body">
                        <p>
                           @Post.Content
                        </p>
                        
                        <br/>
                        <hr/>
                        <br/>
                        <div id="comments-section-@Post.PostId">
                            
                            @if (Post.Comments.Count > 0)
                            {
                                <h6 style="color: black">Comments:</h6>
                            }
                            <div id="comments-container-@Post.PostId">
                                @foreach (CommentViewModel comment in Post.Comments)
                                {
                                    <div id="comment-@comment.CommentId" class="d-flex justify-content-between align-items-center border-bottom mb-2 pb-2">
                                        <span>@comment.Text</span>
                                        <div>
                                            <button class="btn btn-sm btn-outline-secondary" onclick="" data-bs-target="#edit-comment-modal" data-bs-toggle="modal">Edit</button>


                                            <button class="btn btn-sm btn-outline-danger" onclick="">Delete</button>

                                        </div>
                                    </div>
                                }

                            </div>
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" placeholder="Write a comment..." id="comment-input" @bind="_commentModel.Text">
                                    <button class="btn btn-outline-secondary" type="button" @onclick="CreateNewCommentHandler">Comment</button>
                                </div>
                        </div>
                        
                    </div>
                        <div class="card-footer">
                            <input type="button" class="btn btn-danger" value="Delete" id="remove-post-"/>
                            <input type="button" class="btn btn-warning" value="Edit" id="edit-post-" data-bs-target="#edit-post-modal" data-bs-toggle="modal" onclick=""/>
                        </div>
                </div>
                <br />
            </div>
@code {
    
    [Parameter] public PostViewModel Post { get; set; }

    private CommentModel _commentModel = new CommentModel();
    HttpClient _httpClient = new HttpClient();

    private async Task CreateNewCommentHandler(MouseEventArgs e)
    {
        if (e.Button == 0)
        {
            _commentModel.PostId = Post.PostId;
            string token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            HttpResponseMessage response = await _httpClient.PostAsJsonAsync("https://localhost:7022/api/Comment/Create", _commentModel);

            if (response.IsSuccessStatusCode)
            {
                var createdCommentId = await response.Content.ReadFromJsonAsync<int>();
                Post.Comments.Add(new CommentViewModel()
                {
                    CommentId = createdCommentId,
                    PostId = Post.PostId,
                    Text = _commentModel.Text
                });
                
                StateHasChanged();
            }
        }
    }
}