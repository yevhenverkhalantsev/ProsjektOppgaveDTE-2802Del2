@using ProsjektOppgaveBlazor.Data.CommonModels
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.SignalR.Client
@using ProsjektOppgaveBlazor.Pages.Blog
@using ProsjektOppgaveBlazor.Components.Comment

@inject IJSRuntime JsRuntime


<br/>
            <div id="post-container-">
                <div class="card">
                    <div class="card-header">
                        <div class="row">
                            <h5 class="col-md" style="color: black">
                                @Post.Title 
                                @if (Post.Tags.Any())
                                {
                                    @: #: @(string.Join(" | ", Post.Tags.Select(t => t.Name)))
                                }
                            </h5>

                        </div>

                    </div>
                    
                    <div class="card-body">
                        <p>
                            @Post.Content
                        </p>
                        
                        <br/>
                        <hr/>
                        <br/>
                        <div id="comments-section-@Post.PostId">
                            
                            @if (Post.Comments.Count > 0)
                            {
                                <h6 style="color: black">Comments:</h6>
                            }
                            <div id="comments-container-@Post.PostId">
                                
                                @foreach (CommentViewModel comment in Post.Comments)
                                {
                                    <CascadingValue Value="this">
                                        <ViewComment Comment="comment"/>
                                    </CascadingValue>
                                }

                                <CascadingValue Value="this">
                                    <CreateComment Post="Post"/>
                                </CascadingValue>

                            </div>
                        </div>
                        
                    </div>
                    
                    <CascadingValue Value="this">
                        <BtnEditDeletePost Post="Post"/>
                    </CascadingValue>
                    
                </div>
                <br />
            </div>
@code {
    
    [CascadingParameter] public View ParentComponent { get; set; } 
    [Parameter] public PostViewModel Post { get; set; }
    [Parameter] public BlogViewModel BlogView { get; set; }

    private CommentModel _commentModel = new CommentModel();
    HttpClient _httpClient = new HttpClient();

    protected override async Task OnInitializedAsync()
    {

        HubConnection hubConnectionPostUpdate = new HubConnectionBuilder()
            .WithUrl("https://localhost:7022/api/Post/Update")
            .Build();
        
        HubConnection hubConnectionCommentCreate = new HubConnectionBuilder()
            .WithUrl("https://localhost:7022/api/Comment/Create")
            .Build();
        
        HubConnection hubConnectionCommentUpdate = new HubConnectionBuilder()
            .WithUrl("https://localhost:7022/api/Comment/Update")
            .Build();
        
        HubConnection hubConnectionCommentDelete = new HubConnectionBuilder()
            .WithUrl("https://localhost:7022/api/Comment/Delete")
            .Build();
        
        
        await hubConnectionPostUpdate.StartAsync(); 
        hubConnectionPostUpdate.On<PostViewModel>("UpdatePostNotify", async (post) =>
        {
            if (Post.PostId == post.PostId)
            {
                Post = post;
                await InvokeAsync(StateHasChanged);
            }
        });
        
        await hubConnectionCommentCreate.StartAsync();
        hubConnectionCommentCreate.On<CommentViewModel>("CreateCommentHandler", async (comment) =>
        {
            if (Post.PostId == comment.PostId)
            {
                if (Post.Comments.All(c => c.CommentId != comment.CommentId))
                {
                    Post.Comments.Add(comment);
                }
                _commentModel.Text = String.Empty;
                await InvokeAsync(StateHasChanged);
            }
        });
        
        await hubConnectionCommentUpdate.StartAsync();
        hubConnectionCommentUpdate.On<CommentViewModel>("UpdateCommentNotify", async (comment) =>
        {
            // if (Post.PostId == comment.PostId)
            // {
            //     Comment = comment;
            //     await InvokeAsync(StateHasChanged);
            // }
        });
        
        await hubConnectionCommentDelete.StartAsync();
        hubConnectionCommentDelete.On<int>("DeleteCommentHandler", async (commentId) =>
        {
            var commentToDelete = Post.Comments.FirstOrDefault(c => c.CommentId == commentId);
            if (commentToDelete != null)
            {
                Post.Comments.Remove(commentToDelete);
                await InvokeAsync(StateHasChanged);
            }
        });
    }
    
    public void OpenEditCommentModal(CommentViewModel commentViewModel)
    {
        ParentComponent.OpenEditCommentModal(commentViewModel);
    }
}